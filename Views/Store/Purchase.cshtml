@model EMIM.ViewModel.OrdersListViewModel

@{
    ViewData["Title"] = "Órdenes de Clientes";
    Layout = "~/Views/Shared/_StoreLayout.cshtml";
}

<body class="bg-gray-100">
    <main>
        <section class="container mx-auto p-6">
            @await Component.InvokeAsync("BackButton")

            <div class="mb-8 flex justify-between items-center">
                <h1 class="text-2xl font-bold text-gray-800">Órdenes de Clientes</h1>
                <div class="flex gap-2">
                    <select id="statusFilter" class="bg-white border border-gray-300 rounded-lg px-4 py-2 text-gray-700">
                        <option value="all" selected="@(Model.StatusFilter == "all")">Todos los estados</option>
                        <option value="pagado" selected="@(Model.StatusFilter == "pagado")">Pagado</option>
                        <option value="empacando" selected="@(Model.StatusFilter == "empacando")">Empacando</option>
                        <option value="en reparto" selected="@(Model.StatusFilter == "en reparto")">En reparto</option>
                        <option value="completado" selected="@(Model.StatusFilter == "completado")">Completado</option>
                    </select>
                    <select id="sortOrder" class="bg-white border border-gray-300 rounded-lg px-4 py-2 text-gray-700">
                        <option value="recent" selected="@(Model.SortOrder == "recent")">Más recientes</option>
                        <option value="older" selected="@(Model.SortOrder == "older")">Más antiguas</option>
                        <option value="expensive" selected="@(Model.SortOrder == "expensive")">Mayor precio</option>
                        <option value="cheaper" selected="@(Model.SortOrder == "cheaper")">Menor precio</option>
                    </select>
                </div>
            </div>

            <!-- Lista de órdenes -->
            <div class="space-y-4">
                @if (Model.Orders.Any())
                {
                    @foreach (var order in Model.Orders)
                    {
                        <a href="@Url.Action("PurchaseStatus", "Store", new { id = order.Id })" class="block">
                            <div class="bg-white rounded-lg shadow-md overflow-hidden hover:shadow-lg transition-shadow cursor-pointer">
                                <div class="p-4 md:p-6">
                                    <div class="flex flex-col md:flex-row md:justify-between md:items-center">
                                        <div>
                                            <div class="flex gap-3 items-center mb-2">
                                                <h3 class="text-lg font-semibold text-gray-800">Orden #@order.Id</h3>
                                                <span class="px-2 py-1 @GetStatusBadgeClass(order.CurrentStatus) text-xs font-medium rounded-full">@order.CurrentStatus</span>
                                            </div>
                                            <p class="text-gray-600 text-sm">Fecha: @order.FormattedDate</p>
                                        </div>
                                        <div class="mt-3 md:mt-0">
                                            <p class="text-lg font-bold text-gray-800">$@order.TotalPrice.ToString("N2")</p>
                                            <p class="text-xs text-gray-500">@order.ProductCount producto(s)</p>
                                        </div>
                                    </div>
                                    
                                    <div class="mt-4 pt-4 border-t border-gray-100">
                                        <div class="flex flex-wrap gap-2">
                                            @foreach (var thumbnail in order.ProductThumbnails.Take(2))
                                            {
                                                <img src="@thumbnail.ImageUrl" alt="Producto" class="w-12 h-12 rounded-md object-cover">
                                            }
                                            @if (order.ProductCount > 2)
                                            {
                                                <span class="flex items-center justify-center w-12 h-12 bg-gray-100 rounded-md text-gray-500 text-xs">+@(order.ProductCount - 2)</span>
                                            }
                                        </div>
                                        <div class="flex justify-between items-center mt-4">
                                            <p class="text-sm text-gray-600"><strong>Fecha estimada de entrega: </strong> @order.EstimatedDeliveryDate</p>
                                            <svg xmlns="http://www.w3.org/2000/svg" class="h-5 w-5 text-gray-400" fill="none" viewBox="0 0 24 24" stroke="currentColor">
                                                <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M9 5l7 7-7 7" />
                                            </svg>
                                        </div>
                                    </div>
                                </div>
                            </div>
                        </a>
                    }
                }
                else
                {
                    <div class="bg-white rounded-lg shadow-md p-6 text-center">
                        <p class="text-gray-600">No hay órdenes disponibles.</p>
                    </div>
                }
            </div>
        </section>
    </main>

    <!-- Referencia al archivo JavaScript externo -->
    <script src="~/js/orders.js" asp-append-version="true"></script>
</body>

@functions {
    string GetStatusBadgeClass(string status)
    {
        return status.ToLower() switch
        {
            "pagado" => "bg-green-100 text-green-800",
            "empacando" => "bg-blue-100 text-blue-800",
            "en reparto" => "bg-yellow-100 text-yellow-800",
            "completado" => "bg-gray-100 text-gray-800",
            _ => "bg-gray-100 text-gray-800"
        };
    }
}